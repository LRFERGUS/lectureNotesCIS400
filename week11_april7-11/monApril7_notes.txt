UML in WPF tutorial: due Monday
Milestone 9: due Friday


Exam 2: Wednesday, April 16

--> will post review materials for next week's module
--> Mon April 14 will be an exam review day
--> no milestone/tutorials due next week
--> all tutorials/milestones since Exam 1 must be turned in by
    Fri April 18 for any partial credit

--> we will start on Razor pages after the exam

////////////////////////////////////

Milestone 9.
- Update UML to match current state of your application

- Unit test updates from Milestones 7-8

- Integration testing


//////////////////////////////////

UML considerations:
- denote the namespaces (how?)
    1) tabs in Visio, DairyBarn.Data, DairyBarn.PointOfSale
    2) use a package designation in UML, one for DairyBarn.Data,
        one for DairyBarn.PointOfSale


- fully qualify class (what does that mean?) if referring to a class
    from a different namespace

    Namespace.Classname
    DairyBarn.Data.Order


- indicate that MainWindow extends Window 


- indicate that EVERY user control extends UserControl 


- include all named controls, public properties/methods/events, and
    event handlers (even if private) in UML



- indicate the DataContext of EVERY window/control (unless it is inheriting
    from a parent control)

        MainWindow: ? Order
        Payment control: ? PaymentViewModel (library issues)
            will need to move PaymentViewModel to the Data project
            if it isn't there
        all customization controls: the corresponding menu item

    what type of relationship is this? aggregation (HAS-A)
        diamond touches the class doing the collection
        diamond would touch the control/window

    multiplicities? 1 to 1 in this case.
    don't need to include multiplicities if 1-1.
    DO indicate multiplicities when not 1 to 1



- indicate whenever a window/control is placed on another control
    MainWindow has? all of them (menu selection, order summary,
        payment control, all customization controls)

        composition relationship
        MainWindow HAS a burger customization control
            diamond touches MainWindow

    all customization controls have? the helper control
        burger control, ice cream control: have a count box control
    

///

--> recommendation: have sections on your UML:
    - one for inheriting Window/UserControl
    - one to show the DataContexts
    - one to show the composition of controls on other controls



--> custom event args?
    extends RoutedEventArgs - should be indicated
    has IMenuItem as a property or field    (use aggregation, diamond
                                        touches the custom event args)

   see in MainWindow/different user control's code behinds
        type of an event
        or, event handler, parameter is a custom event args

    use the directed association relationship
    should point from the window/control to the custom event args



--> UML changes in Data project?
    IMenuItem? implements INotifyPropertyChanged

    PickTwo, Burger, IceCream, Drink?
        include PropertyChanged event

    PickTwo?
        list of burger types, list of ice cream types


    Burger?
        bool: if it was part of a pick two


    BurgerIngredient implements..? INotifyPropertyChanged

    PaymentViewModel implements? INotifyPropertyChanged


//////////////////////////////////

Unit tests.

Each menu item unit test class:
- test the menu item implements INotifyPropertyChanged
        Assert.IsAssignableFrom

- for the corresponding menu item:
    --> think of which properties can change (either with a set 
        or as a result of other properties changing)
    --> test ALL combinations of (changingProperty, affectedProperty)
        to ensure PropertyChanged is invoked

        winter swirl: mix in choice?

        affects: MixInChoice, Calories, PreparationInformation



--> also, for EACH burger type: try changing its ingredients to be
    included/not included. Assert that such changes invoke
    PropertyChanged for that burger

        Which properties change? Calories, PreparationInformation, Price



    (you should also do this for drink/ice cream if its customizations involve
    a similar dictionary)



--> for PickTwo: try changing burger/ice cream choice, assert that
    PropertyChanged is correctly invoked for?
        PreparationInformation, Calories, Price, (Burger/ice cream choice)


    (it is OK if you do this with specific entrees/sides/drinks)
    (you don't need to check anything with further customizations)




--> also complete the integration tests described for PaymentViewModel.





////////////////////////

Example: Coffee

- implements INotifyPropertyChanged
- what properties can change? 

    size impacts: calories, price, PreparationInformation, size
    iced impacts: PreparationInformation, iced
    decaf: PreparationInformation, decaf, calories
    cream: calories, PreparationInformation, cream
    sugar: calories, PreparationInformation, sugar

    --> What properties are affected as a result of that change?

    --> how to write one of the tests (check size change properties)

Testing cream for coffee.

[Theory]
[InlineData(true, "Calories")]
[InlineData(true, "PreparationInformation")]
[InlineData(true, "Cream")]
[InlineData(false, "Calories")]
[InlineData(false, "PreparationInformation")]
[InlineData(false, "Cream")]
public void ChangingCreamShouldNotifyOfPropertyChanged(bool cream, string property)
{
    Coffee c = new();
    Assert.PropertyChanged(c, property, () => {
        c.Cream = cream;
    });
}