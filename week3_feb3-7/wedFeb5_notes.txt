Milestone 2 due Friday.


Add 5 new enums:
    Type of cheese
    Size of coffee drink
    Type of ice cream cone
    Type of ice cream mix-in
    Type of ice cream sauce
    (why use enums instead of strings?)



Each burger has cheese/patties properties (1-2 or 1-3)
    constraints?

private Cheese _cheeseChoice = Cheese.Cheddar;
public Cheese CheeseChoice
{
    get => _cheeseChoice;
    set
    {
        if (value == Cheese.Cheddar || value == Cheese.None) {
            _cheeseChoice = value;
        }
    }
}

can do Patties property in a very similar way


    what other properties are affected?
        Calories, Price, PreparationInformation

    what to do with bool cheese properties? delete them



Each sundae has sauce/scoops properties (2 or 1-3)
    each sundae has ONE sauce
    constraints?
        brownie sundae - default sauce is hot fudge.
            in the sauce property, make sure value is: hot fudge or none
        classice sundae - don't need sauce constraints, can be any sauce

    what other properties are affected?
        Price/Calories/PreparationInformation

    what to do with bool sauce properties? deleted



Ice cream cone has scoops (1-2) and cone type 
    what other properties are affected?
        Calories/Price/PreparationInformation



New classes: Mocha, Latte, WinterSwirl
    mocha/latte - don't need calorie adjustment for decaf



All coffee items have a size
    scaling? original info was for Tall (smallest - 12 oz)
        Grande is 16 oz
        Venti is 20 oz
        do scaling last


/////

--> be sure to document!

summary above class, property, method
methods should have params/return



--> reorganize code into folders. Be careful! 
    Might rename namespaces.