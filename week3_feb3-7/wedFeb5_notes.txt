Milestone 2 due Friday.


Add 5 new enums:
    Type of cheese
    Size of coffee drink
    Type of ice cream cone
    Type of ice cream mix-in
    Type of ice cream sauce
    (why use enums instead of strings?)


Example: Cheese enum

public enum Cheese
{
    Cheddar,
    American,
    Swiss,
    PepperJack,
    None
}



Each burger has cheese/patties properties (1-2 or 1-3)
    constraints?
    what other properties are affected?
        Price/Calories/PreparationInformation

    what to do with bool cheese properties?  delete them

Example: CheeseChoice property in BBQBaconCheeseburger

private Cheese _cheeseChoice = Cheese.Cheddar;
public Cheese CheeseChoice 
{   
    get
    {
        return _cheeseChoice;
    }
    set
    {
        if (value == Cheese.None || value == Cheese.Cheddar)
        {
            _cheeseChoice = value;
        }
    }
}

//would still need to add private backing field, enforce constraint in set
public uint Patties {get; set;} = 1;



Each sundae has sauce/scoops properties (2 or 1-3)
    each sundae has ONE sauce
    constraints?
        classic sundae - sauce property has no constraints
    what other properties are affected?
        Price/Calories/PreparationInformation

    what to do with bool sauce properties?  delete them




Ice cream cone has scoops (1-2) and cone type 
    what other properties are affected?
        Price/Calories/PreparationInformation



New classes: Mocha, Latte, WinterSwirl
    mocha/latte - don't need calorie adjustment for decaf



All coffee items have a size (Tall, Grande, Venti)
    scaling? 
        Price
        Calories - normal calculation gives you calories for a Tall
            Tall - 12 oz, Grande - 16 oz, Venti - 20 oz
            do adjustments before scaling


/////

--> be sure to document!

summary above class, property, method
methods should have params/return



--> reorganize code into folders. Be careful! 
    Might rename namespaces.