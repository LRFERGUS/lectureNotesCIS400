Encapsulation tutorial: due tonight
Properties tutorial: due Tuesday
Milestone 1: due Friday (you might notice the design is ugly...)

    BBQBaconCheeseburger


--> calculating the calories

--> building the prep info



--> make sure your project builds (but it won't run)

--> save your files!

--> how to check what you submitted?

--> what if you need to re-release? 


--> "you are ahead of branch main..."

----------------------------

Properties.


--> autoproperty

public int Num {get; set;}

    equivalent to?

private int _num;
public int Num
{
    get
    {
        return _num;
    }
    set
    {
        _num = value;
    }
}



--> how to control visibility?
    could put private in front of "set"


--> how to set default values?


public int Num {get; set;} = 5;


OR 

private int _num = 5;
public int Num
{
    get
    {
        return _num;
    }
    set
    {
        _num = value;
    }
}


--> how could we do that from the constructor?

all in a class called "Lecture"

public Lecture() 
{
    Num = 5;
    //or _num = 5;
}




--> what is "init"?


initialize

public int Num {get; init;} = 5;


all in class called "Lecture"

Lecture l = new() {Num = 10};



what if no init?

public int Num {get;} = 5;

can have constructor

public Lecture() {
    Num = 10;
}



--> lambda notation =>


public int Num => 10; //is a property with get access, but can't change


Lecture lec = new();
lec.Num = 20; //no, can't change


private int _num = 5;
public int Num
{
    get => _num;
    set => _num = value;
}

---------------------------

Common mistake with properties:

public int Property
{
    get
    {
        return Property;
    }
    set
    {
        Property = value;
    }
}

obj.Property;


----------------------------


See LabRoom class. Turn fields into properties.
--> enforce room size 10-30
--> make Windows value get-only (except on creation)
    (what are two ways to do this?)


------------------------------

static vs non-static.

    --> when can/should a field/method/property be static?


    --> when is a field/method/property NOT allowed to be static?


    --> when should a class be static?




--> can a static class have a constructor?


--> can a non-static class have a static constructor?


--> what if we wanted a consistent drinks policy (yes/no) across all
    lab rooms?


--> how could we initialize the drink policy for everyone?


--> how could we modify the drinks policy for everyone?


---------------------------------------------
stopped here, will continue on Wednesday
---------------------------------------------

Encapsulation - what is this?


Want to keep track of scores and majors for students.
    --> see current organization
    --> why not great?
    --> how to improve?


----------------------------


Other vocab:

Information hiding
State