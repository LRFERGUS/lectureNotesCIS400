Milestone 3 was due last night

Testing tutorial: due tonight
UML tutorial: due tomorrow


///////////////////////////

Milestone 4: due Sunday (extended to give you a full week
    since the last milestone)

--> how to customize a burger?


ClassicCheeseburger c = new();
c.AllToppings[BurgerTopping.Ketchup].Included = false;



//////////////////////////

Exam 1: Wednesday, February 26


Next week will have a different structure:
    - No tutorials or milestones
    - Review on Monday
    - Exam 1 on Wednesday
    - Work day Friday
    - ALL past due assignments must be submitted by Friday, Feb 28
        for any partial credit

After the exam, we will start on WPF (to make the UI)

//////////////////////////////

Today:
- Creating a test project
- Writing test cases 
- UML
- Implementing a collection
- Nullables


////////////////////////

Dog class: make Legs allow values of 2-4

Add Age property

Implement PeopleYears property


////////////////////////

Creating an XUnit testing project

Adding a project reference


////////////////////////


In general, what to test?

1) default values - Fact
    Legs - 4
    Age - 0


2) derived values - properties/methods - Theory


3) enforcing property bounds
    does it allow GOOD changes?
    does it not allow BAD changes?

////////////////////////

Basics of writing a unit test

- Fact unit test (default values)

    (what properties have default values for Dog?)



--> why can't we see the Dog class? How to fix?

GlobalUsings.cs


- Theory unit test (derived properties and methods)

        How to choose inline data?



--> testing bounds


////////////////////////

Kinds of asserts

    Assert.Equal(expected, actual);
    Assert.Equal(expected, actual, decimalPlacesToCheck);

    Assert.True(value);
    Assert.False(value);

    Assert.Contains(expectedItem, collection);
    Assert.All(collection, item => (a condition that should be true for current item));
    
    Assert.IsAssignableFrom<T>(item); 

Example:
    Assert.IsAssignableFrom<IMenuItem>(someObject);

//////////////////////

Implementing a collection.

Example: AnimalCollection
Adds a legs count property


//////////////////////

UML. - Visio


+ public 
- private
# protected


+ Calories: uint <<get>>


--> be familiar with how to list ALL members
--> for milestones, only need to list PUBLIC members
--> constructors? don't need default


/////////////////////////////////

Stopped here.

On Wednesday, will discuss UML a bit more, plus information about unit
tests for Milestone 4

/////////////////////////////////

Relationships:
    Realization (is-a):
    Generalization (is-a):
    Aggregation (has-a):
    Composition (has-a):
    (and others, but this is it for now)


What members to show if you are implementing an interface?



What members to show if you are extending a class?
    not overridden?
    is overridden?


///////////////////


Nullables

    type? name;

What does it mean? 

Why use them? 



value types can be nullable too:

    int? a = null;



null condition operator

    Dog? d = (some value)
    d?.Print(); //when is Print called? (assuming we have a Print method...)



///////////////////////

Next time:
- Discuss testing needs for Milestone 4
- Discuss UML for Milestone 4

