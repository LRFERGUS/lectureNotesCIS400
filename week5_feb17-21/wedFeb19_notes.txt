Milestone 4: due Sunday 

--> This is one of the more time-consuming milestones. Start early!

//////////////////////////

Exam 1: Wednesday, February 26


Next week will have a different structure:
    - No tutorials or milestones
    - Review on Monday
    - Exam 1 on Wednesday
    - Work day Friday
    - ALL past due assignments must be submitted by Friday, Feb 28
        for any partial credit

After the exam, we will start on WPF (to make the UI)

//////////////////////////////

Today:
- Tiny bit on nullables 
- Milestone 4 tests
- Milestone 4 UML

//////////////////////////////

Nullables

public List<string>? MyList {get; set;}


--> what if you got a compiler warning about nullables?

MyList.Add(...);


--> how to fix?



///////////////////

Tests for Milestone 4.

Do first: specific required tests



- should have a separate test class for each non-abstract menu item
    1) test default values for all properties whose value can change
        (except you don't have to test prep info defaults)

    2) test each derived property based on possible configurations
        Price, Calories, PreparationInformation


    3) test any bounds/constraints for properties -- make sure you CAN 
        change those properties to a *good* value, and that you CAN'T
        change them to a *bad* value

        Patties/Scoops/Cheese/Sauce


    4) test IsAssignableFrom with IMenuItem, base class



/////////////////////////////////////////

Example: ClassicCheeseburger
    ketchup, mustard, pickles, onions - included
    bacon, lettuce, tomato - not included
    American cheese
    non-veggie
    1 patty


    1) what to do for defaults test?

        assert that patty is 1
        assert that cheese is American

        assume b is a ClassicCheeseburger object

        Assert.True(b.AllToppings[BurgerTopping.Ketchup].Included);
        similar for mustard/pickles/onions

        same, but assert false for bacon/lettuce/tomato

        assert that the count of b.AllToppings is 7

        assert that veggie is false

        check default price is $6.29, default calories are 615



    2) which derived properties to test? Calories/Price/PreparationInformation
    
        what kinds of test cases? theory
        
        Parameters:
            bool ketchup,
            bool mustard,
            //total of 7 bools for the 7 possible toppings 
            Patties
            veggie 
            cheese 
            expected value


        what should you choose for inline data?
            
            2^7

            opposite of default toppings
            included all toppings
            included no toppings
            make sure each parameter (cheese, veggie, patties) gets changed
                as part of some test




        --> preparation information?

        Parameters:
            bool ketchup,
            bool mustard,
            //total of 7 bools for the 7 possible toppings 
            Patties
            veggie 
            cheese 
            expected value - string[] prepInfo
        
        [InlineData(...., new string[]{"Hold Ketchup", "Add Bacon"})]


        set up burger with that configuration

        Assert.All(prepInfo, info => b.PreparationInformation.Contains(info));

        also test that the counts of prepInfo and b.PreparationInformation match


    3) how to test bounds? Patties, Cheese

    recommend modeling after dog legs bounds unit test from Monday

    4) test IsAssignableFrom with IMenuItem, Burger

//////////////////////////////////////

Order tests: use mock objects
    new properties: TaxRate, Subtotal, Total, Tax


    Defaults:
        TaxRate - 0.0915
        Subtotal/Total/Tax all 0




    Derived properties: Subtotal, Tax, Total


    Subtotal, e.g.:
        Order o = new();
        o.Add(new MockMenuItem(){Price = 5.0m});
        o.Add(new MockMenuItem(){Price = 15.0m});

        Assert.Equal(20.0m, o.Subtotal, 2);


    private class MockMenuItem : IMenuItem {
        //list all things from interface

        public decimal Price { get; set; }
    }



////////////////////////////////////   

PickTwo tests:

    1) default BurgerChoice is a ClassicCheeseburger, default IceCreamChoice is
        ClassicSundae

        PickTwo two = new();

        Assert.IsType<ClassicCheeseburger>(two.BurgerChoice);

    2) calories, price

        Assert.Equal(two.BurgerChoice.Calories + two.IceCreamChoice.Calories, two.Calories);


/////////////////////////////////////

BYOBurger tests:
    all ingredients are possible

    configuration instead of bools. pass BurgerTopping[] 

    [InlineData(..., new BurgerTopping[]{BurgerTopping.Bacon, BurgerTopping.Ketchup})]

/////////////////////////////

UML for Milestone 4.

Relationships:
    Realization (is-a):
        what for? interfaces
        looks like? dotted line, open arrow, points to interface
        where used? Burger/Drink/IceCream/PickTwo implements IMenuItem


    Generalization (is-a):
        what for? inheritance
        looks like? solid line, open arrow, points to parent class
        where used? ClassicCheeseburger extends Burger
            (and for all individual menu items)


    Aggregation (has-a): 
        what for? collection
        looks like? open diamond, solid line, diamond touches collection
        where used? PickTwo is a collection of IMenuItem
        multiplicities?


    Composition (has-a):
        what for? collection
        looks like? closed diamond, solid line, diamond touches collection
        where used? Order is a collection of IMenuItem,
            Burger is collection of BurgerIngredient
        multiplicities? 1 Order is a collection of 0..* IMenuItem




Enums? should show, but no relationships, put near class that uses

ICollection? Order implements ICollection

IngredientDatabase? static (underline everything)

BurgerIngredient? show this, show that Burger is a collection of BurgerIngredient

PickTwo? show collection

How to organize?
    IMenuItem interface, Burger/Drink/IceCream/PickTwo
    Burger, all the burger stuff
    IceCream section
    Drink section
    Order, ICollection, Order is collection of IMenuItem
    IngredientDatabase

