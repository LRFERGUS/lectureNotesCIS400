Exam 2.

High: 100/100 (5 students!)
Average: 77/100 (includes two students who didn't take exam)

A (90-100): 16 students
B (80-89): 9 students
C (70-79): 17 students
D (60-69): 12 students
F (below 60): 6 students (includes 2 zeros) 


Didn't do as well as you wanted? Remember the optional final exam.


Quickly see solution

////////////////

Begin Razor pages.
- inject C# code into HTML to create dynamic web pages
- will need to add new ASP.NET Core project
    (might need to choose "install more tools and features"
    when adding new project and then search for ASP bundle)

Tutorial 1 : Intro to Razor Pages (due today)
    - create a new ASP.NET Core project, review HTML and CSS,
        see PageModels

Tutorial 2: More with Razor Pages (due Tuesday)
    - read in JSON of movie info, display on a webpage
    - more with styling elements

//////////////////////

See: creating a new ASP.NET Core Web App (not MVC, or won't be cross platform)

(what if the option isn't there?)



See: checking .NET version
See: really quickly displaying something by using the PageModel

(create list of strings in PageModel)

(in .cshtml side, loop to build a list element with each item)


using statements?

//////////////////////

Milestone 10: due Friday
- Create a website for Dairy Barn
- About page, Privacy page
- Home page displays ALL menu options, sectioned by
    Burgers/Ice Cream/Drinks
    --> also show available toppings under Burgers


When you add the ASP.NET web app project, be sure to right-click the 
    dairy barn solution and do Add->New project




Access Data project?

1) Add project reference to Data
2) Add a using statement (in both html and page model)



/////////////////


- Idea: create instance of all (as much as is reasonable...) so they're there
    and ready to search for next week

    Burgers: create instance of each type of burger in each possible 
        cheese/patties/veggie combination. Don't need topping combinations.




    Ice Cream: create all possible combinations


    Drinks: create all possible combinations


- Example: Veggie Burger. What combinations?

    cheese - 2 (pepperjack, none)
    patties - 2 (1 or 2 patties)

    4 total 
        pepperjack, 1 patty
        pepperjack, 2 patties
        no cheese, 1 patty
        no cheese, 2 patties


- Example: Classic cheeseburger
    cheese: 2 (American, none)
    patties: 3 (1, 2, or 3)
    veggie: 2 



2*3*2 = 12 possibilities



- Example: Brownie Sundae. What combinations?

    sauce: 2 (hot fudge or none)
    whipped cream: 2 (on or off)
    cherry: 2 (on or off)
    peanuts: 2 (on or off)

total: 2 * 2 * 2 * 2 = 16 possibilities





Display for each item:
    - Name
    - Description
    - Preparation Information
    - Price
    - Calories


user should be able to click to go to Burgers, Ice Cream, Drinks


--> feel free to style however you want! Feel free to look online for CSS examples


--> if you don't like the look of all the menu combinations
- next week we'll be adding search/filters to our menu
- it will be easier if you have a menu with all those combinations
... BUT next week you are welcome to change how things are displayed on the page


////////////////////////

Menu class: Burgers, IceCream, Drinks


--> recommend populating private fields in a static constructor
--> then return the private field in the properties

private static List<IMenuItem> _burgers;


public static List<IMenuItem> Burgers => _burgers;

static Menu() {
    _burgers = new();

    //add all combinations

}




////////////////////////


On Wednesday:
- discuss testing and UML for milestone