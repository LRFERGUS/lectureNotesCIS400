Milestone 7 due Friday

See Monday's notes for a suggested order of approach

////////////////////////////

Burger customization.

- just ONE control to use for all burgers
- customize cheese, patties, veggie

--> how to display the cheeses?

<ComboBox ... ItemsSource="{Binding CheeseOptions}" SelectedItem="{Binding CheeseChoice}"

--> in MainWindow, how to tell if we should display burger
    customization?

have an event handler with our custom event args, custom event args has
    the menu item as a property 

    if menu item was Burger, display the burger customization control 






///////////////////////////

Ice cream / drink customization.

--> if you want, *can* create a helper control with shared info
    e.g., decaf/iced/size for drinks 

    and then place it on a custom control

///////////////////////////

How to make Order properties change when items are customized?

in Order's Add:

item.PropertyChanged += HandlePropertyChanged;


--> then what to do? 

private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e) {
    if (e.PropertyName == "Price") {
        //now Order invoke PropertyChanged for Subtotal, Tax, Total 
    }
}



--> what to do in Remove, Clear? 

item.PropertyChanged -= HandlePropertyChanged;



///////////////////////////////

What if your drink/ice cream used a dictionary of toppings?

Coffee, for example

maybe in Drink, inner DrinkIngredient class with an Included property

maybe in Drink, Dictionary<key, DrinkIngredient>

In coffee customization control
    for cream: check box, Checked="{Binding DrinkIngredients[Drink.Cream].Included}"


 Make your DrinkIngredient class implement INotifyPropertyChanged

       in Included's set, invoke PropertyChanged

In Drink, make sure you do something like:

    (DrinkIngredient).PropertyChanged += MyHelperMethod;

    Write event handler MyHelperMethod, where you invoke your own PropertyChanged
        for calories price, etc.