Milestone 6 due Friday

Will publish next module Friday (w/ Milestone 7) in case you want
    to start over break (nothing due until week after break)

//////////////////////////

Today:
- formatting ListView
- INotifyPropertyChanged
- Testing
- UML

/////////////////////////

Displaying name/price/remove capability of each item in Order Summary:

<ListView HorizontalContentAlignment="Stretch" ItemsSource="{Binding}">
    <ListView.ItemTemplate>
        <DataTemplate>
            <StackPanel>
                // how to get name, price text blocks on same line?

                //how to get the alignment? use DockPanel
                    dock the price to the right
                    dock the name to left

                //have remove button
                <Button Click="HandleRemove">Remove</Button>

            </StackPanel>
        </DataTemplate>
    </ListView.ItemTemplate>
</ListView>

How to get name/price to stretch?

/////////////////////////////

Need order summary to update subtotal/tax/total as you add/remove items

Answer: Order implements INotifyPropertyChanged


public event PropertyChangedEventHandler? PropertyChanged;


Need to invoke PropertyChanged whenever something happens that changes
    the value of a property

    Add, Remove, Clear

    Add:
        Subtotal, Tax, Total
        invoke AFTER adding the item

PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(PropertyName)));


--> user controls are subscribed to the PropertyChanged event for their DataContext
    --> if the control uses data binding with the affected property, it
        will automatically rerender itself



When do we need to invoke PropertyChanged? For what properties?



Also: TaxRate
    changes: Total, Tax, TaxRate

/////////////////////////

Testing.

--> make sure Order number increases by 1 each time

    Order o = new();
    Order o2 = new();
    check that o2's number is 1 bigger than o's number


--> make sure Number/PlacedAt don't change when requested more
    than once

    int curNum = o.Number;
    assert curNum equals o.Number

--> make sure Order implements INotifyCollectionChanged, INotifyPropertyChanged

--> make sure Order invokes PropertyChanged when it should

Example:

[Theory]
[InlineData("Subtotal")]
public void SubtotalChangesWhenAdding(string property) {
    Order o = new();
    Assert.PropertyChanged(o, property, () => {
        o.Add(new MockMenuItem());
    })
}

for add, also tax and total

////////////////////

UML?
    PointOfSale: add click events 
        show MainWindow has a DairyBarn.Data.Order
    Data: Order
        Number, PlacedAt
        implements INotifyCollectionChanged, INotifyPropertyChanged
        list the two events