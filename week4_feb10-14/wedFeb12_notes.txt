Milestone 3 discussion - extended to Sunday, February 16


Overall structure:

IMenuItem interface, implemented by:
    Burger (abstract class)
    IceCream (abstract class)
    Drink (abstract class)


Each abstract class should pull out common code shared by
    those menu items


If there is a common feature among those types of items,
    but the implementation details aren't shared: 
        list it, but make it abstract



***Make use of protected fields or properties that can be
    initialized differently for each child class

    --> this may let you pull out even more common code



Feel free to add constructors/fields/properties/methods
as needed!

/////////////////////////////


IngredientDatabase - static class (standin for a database) that stores info for all
    ingredients.

    --> IngredientInfo: inner class with: Name, Calories, AdditionalPrice
        (might want to add a constructor, or make properties have an init)



    e.g.: private static Dictionary<BurgerTopping, IngredientInfo> _burgerInfo;

    -->  how to initialize in constructor?

        _burgerInfo = new Dictionary<BurgerTopping, IngredientInfo>();

        _burgerInfo[BurgerTopping.GrilledMushrooms] = new IngredientInfo("Grilled Mushrooms", 60, 1m);


    --> how to write GetBurgerToppingName?

public static string GetBurgerToppingName(BurgerTopping top) {
    return _burgerInfo[top].Name;
}



///////////////////////////

IceCream class -> implements IMenuItem

What properties?
    Name
    Description
    Price 
    Calories
    PreparationInformation 
    Scoops
    SauceChoice
    SauceOptions


What will stay abstract?
    Name
    Description
    Price (?)
    Calories (?) - 220 calories per scoop, calories in the sauce, calories unique to a menu item
        could have protected abstract UniqueCalories property, implemented in each menu item 
            for example, ice cream cone unique calories are cone calories + dip calories
    PreparationInformation

What will be implemented?
    Scoops - different items need to enforce different bounds
        EVERY ice cream item wants to set the scoops to minimum, whatever the default value is, and 
        maximum, whatever the max value is 

        in set:
            if (value >= _defaultValue && value <= _maxValue ) {
                _scoops = value;
            }

            can make _defaultValue, _maxValue be protected fields
            add constructor to each menu item, initialize those fields there


    SauceChoice - check if new value is in the SauceOptions, if it is allow the set
    SauceOptions - initialize this for each menu item in its constructor



optional abstract class: Sundae




////////////////////////////

Burger class.

Inner class: BurgerIngredient
    BurgerTopping
    Name
    Included - something that changes as we customize a burger
    Default - this value doesn't change after the burger is created


public Dictionary<BurgerTopping, BurgerIngredient> AllToppings { get; } = new();


--> purpose?
--> how to populate? add a constructor to each child class, add to AllToppings there

BBQBaconCheeseburger constructor:
    AllTopping[BurgerTopping.Bacon] = new BurgerIngredient(BurgerTopping.Bacon, true, true);




Burger properties:
    Name
    Description
    Price
    Calories
    PreparationInformation
    CheeseOptions
    CheeseChoice
    Patties
    Veggie
    AllToppings



What will stay abstract?
    Name
    Description


What will be implemented?
    Price - (starting price for that burger) + (price of any included non-default ingredients) + price of extra patties
        add an abstract protected property for StartingPrice

    Calories - 150 for the bun + (calories of all included toppings ) + calories for extra patties (and cheese)

    CheeseChoice, CheeseOptions, Patties

    PreparationInformation - "Use Veggie Patties", Double/Triple, "Hold American Cheese", "Add Bacon", "Hold Lettuce"

/////////////////////////////////////

Drink class

--> similar idea 
--> think about adding protected fields or properties that can have different values for different child classes

--> how is the price calculation the same for everything?

--> how is the calories calculation the same for everything?

/////////////////////////////////////

BYOBurger.



PickTwo implements IMenuItem
- BurgerChoice/IceCreamChoice
- defaults?
- calories? burger calories + ice cream calories
- price? burger price + ice cream price, with a 25% discount overall