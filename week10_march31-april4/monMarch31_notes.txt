Programmatic controls tutorial: due Monday
MVVM tutorial: due Tuesday
Milestone 8: due Friday


//////////////////

See Milestone 8 demo

//////////////////

Summary of requirements:
- Add ingredient customization to burgers
- Add "pick two" functionality
- Implement "complete order"

/////////////////

Ingredient customization.

- Still use ONE Burger control for all burgers
- You should have a Dictionary<BurgerTopping, BurgerIngredient> AllToppings
    --> this should contain ONLY those ingredients allowed for a particular burger 


///////////////

For burgers, want to display all possible ingredients
    --> each item should have a check box / name of ingredient


Two ways to populate:
    1) Use same approach as programmatic controls video to add the check boxes
        in the code-behind for the Burger control 
            --> call this method when you display the control
            --> you will also need to clear the check boxes when you display
                the control again 



    2) In Burger control XAML, make a ListView whose ItemsSource binds to your
        list of BurgerIngredients. 

        ItemsSource="{Binding AllToppings.Values}"

        
        
        You can make a custom data template (like we did in
        order summary) where you display a check box and TextBlock for each item


        --> what would the DataContext of an item in the ListView be?
            BurgerIngredients


        --> what would that mean we could bind to?
            check box's IsChecked? Included
            TextBlock's Text? Name


////////////////////

Handling PropertyChanged.

--> BurgerIngredient implements INotifyPropertyChanged

    when to invoke?
        in Included's set, invoke PropertyChanged

--> How to make sure Burger's properties change when ingredients change?

in Order's Add, milestone 7:
    item.PropertyChanged += HandleItemChanged;


should work (usually) to put in burger constructors:
    loop over AllToppings.Values
        ing.PropertyChanged += HandleIngredientChanged


write HandleIngredientChanged event handler:
    invoke PC Calories, Price, PreparationInformation

///////////////////

Pick Two

- Add "Add to Pick Two" button to Burger control

--> will need a custom event in burger control
    invoke it in the Add to PickTwo click event

--> write and attach a custom event handler to that event in MainWindow

    in MainWindow's custom event handler:
        remove the burger from the order
        create a new PickTwo with the burger as the BurgerChoice
        add that PickTwo to the order

        burger control is hidden 
        pick two control is visible
        set pick two control's DataContext to be the new PickTwo 




(at some point, make "Add to Pick Two" button hidden if the burger is part 
of a pick two...but don't worry about this until last)

///////////////////

PickTwo customization.

--> what does PickTwo need to do with PropertyChanged?
    have PropertyChanged event
    invoke it when things are customized



- Want to display:

    Selected burger. Option to edit burger. Option to pick new burger.
        bind to BurgerChoice's name, etc.

    Selected ice cream. Option to edit ice cream. Option to pick new ice cream.


recommend combo box's items bound to a list of burger instances
    it's selected item bound to BurgerChoice


////

Think about just burger selection first.

In PickTwo, create List<Burger> BurgerTypes property. Add:
    - the current BurgerChoice
    - instances of every other kind of burger (except BurgerChoice)

        if (BurgerChoice is not VeggieBurger) add new VeggieBurger




What to do in BurgerChoice set?

    public Burger BurgerChoice {
        get ...
        set {
            if (value != _burgerChoice) {
                _burgerChoice.PropertyChanged -= HandleBurgerChanged;
                _burgerChoice = value;
                _burgerChoice.PropertyChanged += HandleBurgerChanged;

                invoke PC for Price, Calories, PreparationInformation, 
                    BurgerChoice, BurgerTypes     
            }
            
        }
    }


What should custom event handler do? (HandleBurgerChanged)
    invoke PC Price, Calories, PreparationInformation



///////////////////////////

In ComboBox for burger selection:
    - ItemsSource = ?  BurgerTypes
    - SelectedItem = ? BurgerChoice





Fix: only do the BurgerChoice set if the value is different from _burgerChoice



What should PickTwo's "Edit burger" button do? How to accomplish?
    another custom event in pick two control
    invoke in the Edit burger click
    listen to in MainWindow
        event handler in MainWindow: displaying the burger customization control



(now do same for ice cream)

//////////////////


MVVM - Model-View-ViewModel

--> common design pattern (esp. in mobile/web dev, but also desktop) similar
    to MVC (model, view, controller)

- Model holds the Data  (the whole Data project is our model)

- View is the XAML (ideally, with minimal code in the code-behind)

- ViewModel handles the logic for the view -- it is the go-between
    - ViewModel has an instance of the Model
    - It exposes Model properties and/or includes additional properties with
        logic about what should be displayed
    - It serves as the DataContext for the View (so the View binds to
        properties in the ViewModel)


--> in full MVVM, each control would have a separate ViewModel. Instead of
    click, etc. events in the code-behind, we would use Commands
    (similar idea [still occur with particular actions] but invokes code 
    in the ViewModel that in turn would change our properties)


///////////////////

Payment control.

- display final costs, allow user to enter payment info 
- (will discuss data validation on Wednesday)

PaymentViewModel:
    - holds an Order instance
    - is the DataContext for PaymentControl
    - Contains properties for PaymentControl to bind to:
        --> What to "pass through" from order?

            public decimal Subtotal => _order.Subtotal;



        --> What new properties?
                Change, PaymentAmount 




        --> property for whether a control is enabled?

            public bool ValidFunds
                (return whether PaymentAmount >= Total)

                IsEnabled="{Binding ValidFunds}"

        --> property for text of an error message?

            public string ErrorMessage
                return "insufficient ..." if not enough funds
                else return ""

                TextBlock on the XAML, bind its Text to ErrorMessage


    --> if we are binding to (changing!) properties in PaymentViewModel,
        what does PaymentViewModel need to do so we get the changes?

the payment amount text box will be bound to 
    PaymentAmount property in the view model


as user edits, automatically calls set for PaymentAmount

_paymentAmount = value;



PaymentViewModel needs to implement INotifyPropertyChanged

in the PaymentAmount set, invoke PC for: Change, ValidFunds, ErrorMessage, PaymentAmount

////////////////////

Wednesday: discuss data validation, burger pick two button visibility